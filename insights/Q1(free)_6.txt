To analyze sentiment for software engineering texts, the paper presents a systematic approach through the development of a sentiment analysis classifier called Senti4SD. Here are the key steps and methodologies outlined in the paper for conducting sentiment analysis in the context of software engineering:
1. **Understanding Sentiment Analysis**:
   - Sentiment analysis involves determining the subjectivity (neutral vs. emotionally loaded) and polarity (positive vs. negative) of a text. It typically relies on sentiment lexicons, which are collections of words annotated with their sentiment orientation.
2. **Challenges in Software Engineering Context**:
   - Existing off-the-shelf sentiment analysis tools are often trained on non-technical domains, leading to misclassifications when applied to technical texts, such as those found in software engineering (e.g., Stack Overflow posts).
   - A common issue is the negative bias of these tools, where neutral technical texts are misclassified as negative due to the presence of technical jargon or problem descriptions.
3. **Development of Senti4SD**:
   - Senti4SD is specifically trained for sentiment analysis in software engineering communication channels. It is built using a gold standard dataset of Stack Overflow posts that have been manually annotated for sentiment polarity.
   - The classifier combines various features to improve accuracy:
     - **Lexicon-based Features**: These features utilize sentiment lexicons to count positive and negative words, assess the sentiment of emoticons, and calculate sentiment scores.
     - **Keyword-based Features**: These include counts of n-grams (uni-grams and bi-grams) and other linguistic features such as the use of uppercase words, laughter expressions, and user mentions.
     - **Semantic Features**: These features are derived from a Distributional Semantic Model (DSM) built using word embedding techniques (e.g., word2vec). The model captures the contextual meaning of words and computes similarity scores between document vectors and prototype vectors representing sentiment classes.
4. **Building a Gold Standard**:
   - A gold standard dataset was created by annotating a large number of Stack Overflow posts for sentiment polarity. This dataset serves as a training and validation resource for the classifier.
   - The annotation process involved multiple coders and was guided by clear coding guidelines to ensure reliability and consistency.
5. **Training and Evaluation**:
   - The classifier is trained using machine learning techniques, specifically Support Vector Machines (SVM), on the features extracted from the annotated dataset.
   - The performance of Senti4SD is evaluated against baseline tools (like SentiStrength) to assess improvements in precision and recall for different sentiment classes (positive, negative, neutral).
6. **Implementation and Results**:
   - The paper reports significant improvements in sentiment classification accuracy with Senti4SD compared to existing tools, particularly in reducing the misclassification of neutral texts as negative.
   - The results demonstrate the effectiveness of combining lexicon-based, keyword-based, and semantic features tailored for the software engineering domain.
7. **Public Availability**:
   - The authors have made the Senti4SD classifier, the gold standard dataset, and the DSM publicly available to encourage further research and validation in the field of sentiment analysis for software engineering.
In summary, to analyze sentiment for software engineering texts, one should develop a domain-specific classifier that leverages a combination of lexicon-based, keyword-based, and semantic features, trained on a carefully annotated dataset that reflects the unique characteristics of technical communication.