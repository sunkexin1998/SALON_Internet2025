The paper emphasizes the importance of distinguishing between technical descriptive text and sentiment expressive text in software engineering (SE) texts for several reasons:
1. **Nature of Expression**: SE texts often express sentiments in a more indirect and dispersed manner compared to texts from social media or other domains. Developers typically describe issues, challenges, or technical details before or after expressing their sentiments. This complexity necessitates a nuanced approach to sentiment analysis that can differentiate between technical descriptions and actual sentiment expressions.
2. **Complex Sentence Structures**: The structure of SE texts tends to be more complicated, with longer sentences and the use of clauses that may not directly convey sentiment. For instance, a sentence may contain technical jargon or conditional clauses that do not express the author's feelings. Therefore, it is crucial to identify and filter out these non-sentimental clauses to avoid misinterpretation of the overall sentiment.
3. **Sentiment Density**: The paper notes that SE texts generally have a lower sentiment density compared to social texts. This means that a higher proportion of words in SE texts may not contribute to sentiment expression. By distinguishing between technical and sentiment-expressive text, sentiment analysis can focus on the relevant portions of the text that actually convey sentiment.
4. **Avoiding Misclassification**: Using off-the-shelf sentiment analysis tools that are not tailored for SE texts can lead to unreliable results. These tools may misclassify technical terms or neutral expressions as positive or negative sentiments. By applying specific rules to identify sentiment-expressive text, the analysis can reduce the risk of misclassification and improve accuracy.
5. **Contextual Understanding**: The context in which sentiments are expressed in SE texts is often tied to specific technical issues or challenges. Understanding this context is essential for accurately interpreting sentiments. For example, a term like "error" may be neutral in a technical discussion but could be interpreted negatively in a different context. 
In summary, distinguishing between technical descriptive text and sentiment expressive text is vital for improving the accuracy and reliability of sentiment analysis in software engineering, as it allows for a more targeted and context-aware approach to understanding developers' sentiments.

The paper outlines a systematic approach to distinguish between technical descriptive text and sentiment expressive text in software engineering (SE) texts through a series of proposed rules and methodologies. Here are the key strategies mentioned:
1. **Segmentation of Text**: The first step involves preprocessing the SE text and segmenting it into sentences and clauses. This is done using natural language processing tools like Stanford CoreNLP, which helps in breaking down the text into manageable parts for analysis.
2. **Filter Rules**: The authors propose specific filter rules to identify whether a sentence is likely to express sentiment. These rules are based on patterns that indicate sentiment expression, including:
   - **Direct Sentiment Pattern**: Sentences that contain exclamation marks, emojis, interjections, or imperative sentences with a high sentiment density are flagged as likely to express sentiment.
   - **Decorated Sentiment Pattern**: Sentences that contain sentimental words modified by adverbs are also considered expressive of sentiment.
   - **"About Me" Pattern**: Sentences that use first-person pronouns (e.g., "I") in conjunction with sentimental words are identified as expressing personal sentiment.
   - **Judgment Pattern**: Sentences that make judgments about objects or situations using specific structures (e.g., "is + sentimental adjective") are also flagged.
3. **Ignoring Non-Sentimental Clauses**: The approach includes rules to ignore clauses that are not likely to express sentiment. For example, clauses in subjunctive mood (identified by conditional adverbials like "if" or "unless") are excluded from sentiment analysis, as they do not reflect the author's actual feelings.
4. **Identifying Polysemous Words**: The paper discusses the importance of context in understanding the meaning of polysemous words (words with multiple meanings). The approach involves using part-of-speech tagging and collocation analysis to determine the correct sentiment associated with these words based on their usage in the sentence.
5. **Adjust Rules**: After filtering, the analysis applies adjustment rules to enhance the sentiment scores derived from the sentiment analysis tool (SentiStrength). These rules help refine the sentiment analysis by considering the context and structure of the sentences.
By implementing these strategies, the proposed approach aims to effectively differentiate between technical descriptions and sentiment expressions in SE texts, leading to more accurate sentiment analysis results. The combination of segmentation, filtering, and contextual understanding allows for a nuanced interpretation of sentiments expressed in the complex language of software engineering.